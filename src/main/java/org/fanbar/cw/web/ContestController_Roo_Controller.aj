// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.fanbar.cw.web;

import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.fanbar.cw.domain.Contest;
import org.fanbar.cw.service.ContestService;
import org.fanbar.cw.service.EventService;
import org.fanbar.cw.service.HeroService;
import org.fanbar.cw.service.ImageService;
import org.fanbar.cw.service.PersonService;
import org.fanbar.cw.service.SeasonService;
import org.fanbar.cw.web.ContestController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect ContestController_Roo_Controller {
    
    @Autowired
    ContestService ContestController.contestService;
    
    @Autowired
    EventService ContestController.eventService;
    
    @Autowired
    HeroService ContestController.heroService;
    
    @Autowired
    ImageService ContestController.imageService;
    
    @Autowired
    PersonService ContestController.personService;
    
    @Autowired
    SeasonService ContestController.seasonService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String ContestController.create(@Valid Contest contest, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, contest);
            return "contests/create";
        }
        uiModel.asMap().clear();
        contestService.saveContest(contest);
        return "redirect:/contests/" + encodeUrlPathSegment(contest.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String ContestController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Contest());
        return "contests/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String ContestController.show(@PathVariable("id") Integer id, Model uiModel) {
        uiModel.addAttribute("contest", contestService.findContest(id));
        uiModel.addAttribute("itemId", id);
        return "contests/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String ContestController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("contests", Contest.findContestEntries(firstResult, sizeNo, sortFieldName, sortOrder));
            float nrOfPages = (float) contestService.countAllContests() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("contests", Contest.findAllContests(sortFieldName, sortOrder));
        }
        return "contests/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String ContestController.update(@Valid Contest contest, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, contest);
            return "contests/update";
        }
        uiModel.asMap().clear();
        contestService.updateContest(contest);
        return "redirect:/contests/" + encodeUrlPathSegment(contest.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String ContestController.updateForm(@PathVariable("id") Integer id, Model uiModel) {
        populateEditForm(uiModel, contestService.findContest(id));
        return "contests/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String ContestController.delete(@PathVariable("id") Integer id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Contest contest = contestService.findContest(id);
        contestService.deleteContest(contest);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/contests";
    }
    
    void ContestController.populateEditForm(Model uiModel, Contest contest) {
        uiModel.addAttribute("contest", contest);
        uiModel.addAttribute("events", eventService.findAllEvents());
        uiModel.addAttribute("heroes", heroService.findAllHeroes());
        uiModel.addAttribute("images", imageService.findAllImages());
        uiModel.addAttribute("people", personService.findAllPeople());
        uiModel.addAttribute("seasons", seasonService.findAllSeasons());
    }
    
    String ContestController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
