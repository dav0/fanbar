// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.fanbar.cw.domain;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import org.fanbar.cw.domain.Person;

privileged aspect Person_Roo_Finder {
    
    public static Long Person.countFindPeopleByUsernameEquals(String username) {
        if (username == null || username.length() == 0) throw new IllegalArgumentException("The username argument is required");
        EntityManager em = Person.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Person AS o WHERE o.username = :username", Long.class);
        q.setParameter("username", username);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Person.countFindPeopleByUsernameLike(String username) {
        if (username == null || username.length() == 0) throw new IllegalArgumentException("The username argument is required");
        username = username.replace('*', '%');
        if (username.charAt(0) != '%') {
            username = "%" + username;
        }
        if (username.charAt(username.length() - 1) != '%') {
            username = username + "%";
        }
        EntityManager em = Person.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Person AS o WHERE LOWER(o.username) LIKE LOWER(:username)", Long.class);
        q.setParameter("username", username);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Person> Person.findPeopleByUsernameEquals(String username) {
        if (username == null || username.length() == 0) throw new IllegalArgumentException("The username argument is required");
        EntityManager em = Person.entityManager();
        TypedQuery<Person> q = em.createQuery("SELECT o FROM Person AS o WHERE o.username = :username", Person.class);
        q.setParameter("username", username);
        return q;
    }
    
    public static TypedQuery<Person> Person.findPeopleByUsernameEquals(String username, String sortFieldName, String sortOrder) {
        if (username == null || username.length() == 0) throw new IllegalArgumentException("The username argument is required");
        EntityManager em = Person.entityManager();
        String jpaQuery = "SELECT o FROM Person AS o WHERE o.username = :username";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Person> q = em.createQuery(jpaQuery, Person.class);
        q.setParameter("username", username);
        return q;
    }
    
    public static TypedQuery<Person> Person.findPeopleByUsernameLike(String username) {
        if (username == null || username.length() == 0) throw new IllegalArgumentException("The username argument is required");
        username = username.replace('*', '%');
        if (username.charAt(0) != '%') {
            username = "%" + username;
        }
        if (username.charAt(username.length() - 1) != '%') {
            username = username + "%";
        }
        EntityManager em = Person.entityManager();
        TypedQuery<Person> q = em.createQuery("SELECT o FROM Person AS o WHERE LOWER(o.username) LIKE LOWER(:username)", Person.class);
        q.setParameter("username", username);
        return q;
    }
    
    public static TypedQuery<Person> Person.findPeopleByUsernameLike(String username, String sortFieldName, String sortOrder) {
        if (username == null || username.length() == 0) throw new IllegalArgumentException("The username argument is required");
        username = username.replace('*', '%');
        if (username.charAt(0) != '%') {
            username = "%" + username;
        }
        if (username.charAt(username.length() - 1) != '%') {
            username = username + "%";
        }
        EntityManager em = Person.entityManager();
        String jpaQuery = "SELECT o FROM Person AS o WHERE LOWER(o.username) LIKE LOWER(:username)";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Person> q = em.createQuery(jpaQuery, Person.class);
        q.setParameter("username", username);
        return q;
    }
    
}
